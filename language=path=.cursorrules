# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- **Verify Field Types:** Double-check Hygraph schema not just for field API IDs but also their *types* (e.g., Relation, String, List of Strings). Assuming a field is a relation when it's a simple type (like `sections` being an array instead of linking to UseCases) leads to incorrect GraphQL queries and 400 errors when trying to access nested fields. Test simple field access first in the playground.
- **Unique Fields for Filtering:** When querying a single item (e.g., `model(where: { ... })`), the `where` clause requires a field marked as unique in the schema (like `id`). For filtering by non-unique fields (like `slug` in this case), use the plural query (`models(where: { nonUniqueField: ... }, first: 1)`).
- **Verify Plural Query Names:** Double-check the exact plural name generated by Hygraph for queries (e.g., `useCaseS` not `useCases`). Use the API Playground to confirm.

# Scratchpad: Hygraph Data Population Plan

**Goal:** Populate Hygraph with detailed technology information, including nested use cases, architectures, components, flows, metrics, and implementation details.

**Key Mutations Used:**

1.  **`updateTechnology` (for adding nested Use Case, Architecture, Components, Flow):**
    *   Targets an existing `Technology` record by ID (e.g., Weaviate `id: "cm5c8if6q7p9m07looqyq23aq"`).
    *   Uses nested `create` within the `data` argument.
    *   **Structure Example:**
        ```graphql
        mutation AddUseCaseDeep($techId: ID!, ...) {
          updateTechnology(
            where: { id: $techId }
            data: {
              useCases: {
                create: [
                  {
                    title: "...",
                    description: "...",
                    queries: ["...", "..."],
                    capabilities: ["...", "..."],
                    industry: { connect: { id: "industry_id" } },
                    architecture: {
                      create: {
                        description: "...",
                        components: {
                          create: [
                            { name: "...", description: "...", details: "...", explanation: ["..."] },
                            # ... more components
                          ]
                        },
                        flow: {
                          create: [
                            { step: "...", description: "...", details: "..." },
                            # ... more flow steps
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          ) { id name useCases { id title } } # Query back relevant IDs
        }
        ```

2.  **`updateUseCase` (for adding details to a specific Use Case):**
    *   Targets an existing `UseCase` record by ID (e.g., Med Image Classification `id: "cm9jbv6kphejm08lfwca1mqqh"`).
    *   Used to add fields like `implementation` (JSON) and `metrics` (`[String!]!`).
    *   **Structure Example:**
        ```graphql
        mutation AddUseCaseDetails($useCaseId: ID!, $implementationData: Json!, $metricsList: [String!]!) {
          updateUseCase(
            where: { id: $useCaseId }
            data: {
              implementation: $implementationData,
              metrics: $metricsList
            }
          ) { id title implementation metrics }
        }
        ```

3.  **`updateTechnology` (for updating top-level Technology fields):**
    *   Targets an existing `Technology` record by ID.
    *   Used to add/update fields like `businessMetrics` (which was `String`, not `[String!]!`).
    *   **Structure Example:**
        ```graphql
        mutation AddBusinessMetrics($techId: ID!, $metricsString: String!) {
          updateTechnology(
            where: { id: $techId }
            data: { businessMetrics: $metricsString }
          ) { id name businessMetrics }
        }
        ```

**Common Pitfalls & Lessons Learned:**

*   **Schema vs. Variables:** Always double-check the exact field type in the Hygraph schema (e.g., `String`, `Json`, `[String!]!`) and ensure the GraphQL mutation variable type matches (`String!`, `Json!`, `[String!]!`). Mismatches cause errors (like the `businessMetrics` String vs. Array issue).
*   **List Formatting:** Provide list inputs directly as JSON arrays (e.g., `"field": ["item1", "item2"]`).
*   **JSON Formatting:** Ensure JSON data for `Json` fields is valid JSON.
*   **Connecting Relations:** Use the `{ connect: { id: "..." } }` syntax within the `data` object to link to existing records. Check the schema's `WhereUniqueInput` type for the relation to see if connecting by other fields (like `slug`) is possible. For connecting multiple items by non-unique fields (like slugs), use the `connect: { where: { slug_in: ["slug1", "slug2"] } }` syntax within the update mutation's data object.
*   **Publishing Status:** Content created/updated via mutations might initially be in the `DRAFT` stage. Ensure records (Technology, UseCase, etc.) are **Published** in the Hygraph UI or via a `publish` mutation to be visible to standard read queries.
*   **GraphQL Caching:** Client-side libraries (like `graphql-request`) often cache query results. Stale data can cause confusion after mutations.
    *   **Debugging:** Use hard refresh (Ctrl+Shift+R), check network requests.
    *   **Fix (Temporary):** Disable cache via client config (`fetchOptions: { cache: 'no-store' }` for `graphql-request`).
    *   **Fix (Robust):** Implement proper cache invalidation strategies if using a more advanced client (like Apollo Client).
    *   **Fix (Header):** Explicitly request the desired stage using the `gcms-stage: PUBLISHED` header in the client config.
*   **Frontend Data Merging:** Be cautious when merging data from multiple sources (e.g., Hygraph + local constants). Ensure the merge logic correctly prioritizes data and handles potential type mismatches or null values. Use spread syntax carefully (`{ ...localData, ...hygraphData }` prioritizes `hygraphData` for overlapping simple fields).
*   **Frontend Rendering:** Add type checks (`typeof`, `Array.isArray`) before using type-specific methods (`.split()`, `.map()`) to prevent runtime errors when data might have unexpected types due to merging or API inconsistencies.
*   **Update Script Structure (`populate_industry_details.py` - Planned):**
    *   Will fetch existing `Industry` by `slug` to get its `id`.
    *   Will use `updateIndustry` mutation.
    *   `data` payload will include simple fields (`description`), multi-value fields (`benefits`, `capabilities`), JSON fields (`keyFeaturesJson`, `statisticsJson`), Rich Text fields (`fullDescription`), and relation connections (`useCaseS: { connect: { where: { slug_in: [...] } } }`).
    *   Will call `publishIndustry` after successful update.

# Scratchpad: Refined Jedi Labs Website Roadmap

**Vision:** Create a dynamic, Hygraph-powered website showcasing Jedi Labs' AI solutions, emphasizing clarity, usability, and showcasing expertise across industries and technologies.

---

## Phase 1: Content & Navigation Foundation (Completed)
*   [✅] Set up Hygraph schema & initial content migration (`industries.py` created basic entries).
*   [✅] Refactor core pages (Industries Overview, Use Cases) to use Hygraph data.
*   [✅] Enhance `/industries` overview page.
*   [✅] Implement dynamic Header navigation.
*   [✅] Create dedicated `/usecases` page with dynamic data & grid layout.

---

## Phase 2: Industry & Technology Deep Dive (Current Focus)

*   **Goal:** Populate individual Industry pages with rich content, build out the Technology section, and reuse UI components effectively.
*   **Steps:**
    *   [->] **2.1: Enhance Individual Industry Pages (`/industries/:slug`)**
        *   **Goal:** Populate individual industry pages with rich, dynamic content from Hygraph, reusing existing components like `OverviewTab.jsx`.
        *   [ ] **Sub-Step 1: Hygraph Schema Modification (Manual)**
            *   [ ] Review `Industry` model in Hygraph UI.
            *   [ ] Add/Verify `description` field (String/Text).
            *   [ ] Add `fullDescription` field (Rich Text).
            *   [ ] Add `benefits` field (String, Multi-value).
            *   [ ] Add `capabilities` field (String, Multi-value).
            *   [ ] Add `keyFeaturesJson` field (JSON).
            *   [ ] Add `statisticsJson` field (JSON).
            *   [ ] Verify/Add `useCaseS` relation field (Relation to UseCase, Multi-value).
            *   [ ] Verify/Add reverse relation field on `UseCase` model.
        *   [ ] **Sub-Step 2: Content Population Script (`populate_industry_details.py`)**
            *   [ ] Create new script `scripts/migrations/hygraph/populate_industry_details.py`.
            *   [ ] Define `INDUSTRY_DETAILS` data structure in the script (or load from external JSON). Include content for all new fields and `connectUseCaseSlugs` for at least one industry (e.g., "Education").
            *   [ ] Implement script logic:
                *   [ ] Fetch industry `id` by `slug`.
                *   [ ] Construct `updateIndustry` mutation with new fields and `useCaseS` connection logic (`connect: { where: { slug_in: [...] } }`).
                *   [ ] Execute mutation for each industry in `INDUSTRY_DETAILS`.
                *   [ ] Implement `publishIndustry` mutation call after successful update.
                *   [ ] Add logging and error handling.
            *   [ ] Run the script to populate data for the test industry ("Education").
        *   [ ] **Sub-Step 3: Frontend Integration (`IndustryPage.jsx` & `OverviewTab.jsx`)**
            *   [ ] Update `GET_INDUSTRY_BY_SLUG` query in `IndustryPage.jsx` to fetch all new fields (`description`, `fullDescription`, `benefits`, `capabilities`, `keyFeaturesJson`, `statisticsJson`) and related `useCaseS` (including `id`, `title`, `slug`, `description`, potentially `icon`).
            *   [ ] Modify `IndustryPage.jsx` render logic:
                *   [ ] Pass `industryData.name` and `industryData.description` to `IndustryHero`.
                *   [ ] Import and render `<OverviewTab industryData={industryData} />`.
                *   [ ] Decide whether to keep or remove the separate `<IndustrySolutions />` component.
            *   [ ] Adapt `src/features/industries/pages/tabs/OverviewTab.jsx`:
                *   [ ] Change props from `solution` to `industryData`.
                *   [ ] Update data access to use `industryData` (e.g., `industryData.fullDescription`, `industryData.keyFeaturesJson`).
                *   [ ] Modify the "Common Use Cases" section to map over `industryData.useCaseS`.
        *   [ ] **Sub-Step 4: Testing & Refinement**
            *   [ ] Test `/industries/education` page thoroughly.
            *   [ ] Verify all content displays correctly.
            *   [ ] Debug any issues.
            *   [ ] Populate content for remaining industries using the script.
    *   [ ] **2.2. Create Technology Landing Page (`/technology`):** (Moved after Industry details)
        *   [ ] Sub-Step 1: Design page layout to display Technology Subcategories.
        *   [ ] Sub-Step 2: Create/Enhance component for `/technology` route.
        *   [ ] Sub-Step 3: Fetch `TechnologySubcategories` (name, slug, description, features - *Requires content population in 2.4*).
        *   [ ] Sub-Step 4: Display subcategories with `id={slug}` for anchor links from Header.
        *   [ ] Sub-Step 5: (Optional) Display related `Technologies` or `UseCases` under each subcategory.
    *   [ ] **2.3. Adapt Reusable UI Components:** (Can happen in parallel or after 2.1/2.2)
        *   [ ] Sub-Step 1: Review old components (e.g., `IndustryHero`, `IndustrySolutionCard`) for useful UI patterns (tabs, detailed cards, grids).
        *   [ ] Sub-Step 2: Adapt chosen patterns into reusable components that accept Hygraph data as props.
        *   [ ] Sub-Step 3: Integrate these adapted components where appropriate.
    *   [ ] **2.4. Enhance Content in Hygraph (Ongoing):**
        *   [ ] Sub-Step 1: Add descriptive content (`description`, `features`) to `TechnologySubcategory` records (Supports 2.2).
        *   [ ] Sub-Step 2: Add more `UseCase` details (metrics, implementation, challenge, solution, results, icon). Link to `Industry`/`Technology`. (Supports 2.1 & future enhancements).
        *   [ ] Sub-Step 3: Decide Architecture display location & link records.
        *   [ ] Sub-Step 4: Ensure all new/updated content is **Published**.
    *   [ ] **2.5. (Future - Part of Phase 3) Enhance Use Case Presentation:**
        *   [ ] Improve architecture display on detail pages.
        *   [ ] Add filtering/sorting to `/usecases` page.
        *   [ ] Display `challenge`, `solution`, `results` fields on Use Case pages/cards.

---

## Phase 3: Content Expansion & Landing Page (Future)

*   **Goal:** Significantly expand content depth and revamp the homepage.
*   **Steps:**
    *   [ ] **3.1. Create More Use Cases:** Use Python scripts/Hygraph UI to add more examples, ensuring links.
    *   [ ] **3.2. Update Landing Page (`/`):** Redesign with clear messaging, featured content, CTAs.
    *   [ ] **3.3. Add Architecture Visualization:** Implement based on decision in 2.4.

---

## Phase 4: Polish & Optimization (Future)

*   **Goal:** Refine the user experience, ensure consistency, and optimize performance.
*   **Steps:**
    *   [ ] **4.1. Visual Consistency & Styling:** Ensure consistent styling, dark/light modes, responsiveness.
    *   [ ] **4.2. Performance Optimization:** Caching, image optimization, loading states, error handling.
    *   [ ] **4.3. SEO & Analytics:** Sitemap, metadata, analytics integration.
    *   [ ] **4.4. Code Cleanup:** Remove unused constants (`navigation` source, `industries.js`, etc.), refactor.

---

**Summary of Recent Progress:**

*   Completed foundational setup and refactoring.
*   Implemented dynamic navigation using Hygraph data.
*   Enhanced the `/industries` overview page.
*   Created the dedicated `/usecases` page with dynamic data.
*   **Identified the need for richer content fields in the Hygraph `Industry` model.**
*   **Developed a plan to modify the schema, create a content population script, and integrate the `OverviewTab` component for individual industry pages.**

**Next Step:**

*   [->] **Execute Step 2.1, Sub-Step 1: Hygraph Schema Modification (Manual)**. Add the required fields (`description`, `fullDescription`, `benefits`, `capabilities`, `keyFeaturesJson`, `statisticsJson`, verify `useCaseS` relation) to the `Industry` model in the Hygraph UI.

---
# Scratchpad: Component Refactoring Notes

**Potentially Unused Components/Constants (Review during Cleanup - Phase 4.4):**

*   Source file for `navigation` constant (Industry list part) - To be cleaned after identification.
*   `src/constants/industries.js`: Likely obsolete.
*   `src/constants/categoryIcons.js`: Likely unused.
*   `src/constants/implementations/`: Likely unused.
*   `src/constants/registry/`: Likely unused.
*   UI Patterns from old `IndustryHero` (Tabs?) / `IndustrySolutionCard` (Detailed lists?) - Check if needed elsewhere.
*   `src/pages/solutions/`: This entire directory seems related to the old hardcoded structure and might be removable after industry pages are fully dynamic. Review `SolutionPage.jsx`, `SolutionsOverview.jsx`, `SolutionTabs.jsx`, `index.jsx`.

**Reusable Components / Patterns (Confirmed):**

*   `src/components/Header.jsx`: Main site header.
    *   `DropdownMenu` / `MobileMenu`: Handle complex nested navigation rendering.
    *   `ThemeToggle`: Theme switching logic.
*   `src/components/Section.jsx`: Layout wrapper.
*   `src/components/Icon.jsx`: SVG icons.
*   `src/lib/hygraph.js`: GraphQL client.
*   `src/features/industries/pages/IndustriesOverview.jsx`: Pattern for listing items with cards.
*   `src/features/industries/components/IndustryHero.jsx`: Simple page hero.
*   `src/features/industries/components/IndustrySolutions.jsx`: Pattern for fetching/displaying related items (May be superseded by `OverviewTab`'s use case section).
*   `src/features/industries/components/IndustrySolutionCard.jsx`: Simple link card.
*   `src/components/Button.jsx`: Standard button.
*   `src/components/transitions/PageTransition.jsx`: Page animations.
*   `src/components/CaseStudies.jsx`: Pattern for displaying Use Case cards (currently used on `/usecases`).
*   `src/features/industries/pages/tabs/OverviewTab.jsx`: Strong candidate for reuse on individual Industry pages to display rich content (benefits, capabilities, features, stats, use cases).
*   `src/features/industries/pages/tabs/DocumentationTab.jsx`: Lower priority, potential reuse later for technical details.